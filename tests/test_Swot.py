# Standard imports
from pathlib import Path
from shutil import copyfile
import unittest

# Third-party imports
from netCDF4 import Dataset
import numpy as np
from numpy.testing import assert_array_almost_equal

# Local imports
from output.modules.Swot import Swot

class test_Swot(unittest.TestCase):
    """Test Swot class methods."""
    
    SOS_NEW = Path(__file__).parent / "sos_new" / "na_apriori_rivers_v07_SOS_results.nc"
    SW_DIR = Path(__file__).parent
    SW_SOS = Path(__file__).parent / "swot" / "na_apriori_rivers_v07_SOS_results.nc"
    FILL = {
        "f8": -999999999999.0,
        "i4": -999,
        "S1": "x"
    }
    
    def get_sos_data(self):
        """Retrieve and return dictionary of SoS data."""
        
        ds = Dataset(self.SOS_NEW, 'r')
        rids = ds["reaches"]["reach_id"][:]
        nrids = ds["nodes"]["reach_id"][:]
        nids = ds["nodes"]["node_id"][:]
        ds.close()
        return { "reaches": rids, "node_reaches": nrids, "nodes": nids }
    
    def test_get_module_data(self):
        """Test get_module_data method."""
        
        # File operations to prepare for test
        copyfile(self.SOS_NEW, self.SW_SOS)
        sos_data = self.get_sos_data()
        
        # Run method
        sw = Swot([7,8,9], self.SW_DIR, self.SW_SOS, None, None, None, \
            sos_data["reaches"], sos_data["node_reaches"], sos_data["nodes"])
        sw_dict = sw.get_module_data()
        
        # Assert results
        i = np.where(sos_data["reaches"] == 74269800011)
        e_obs = [1, 11, 20, 30, 39, 49, 58, 68, 77, 87, 96, 106, 115, 125, 134, 144, 153, 163, 172, 182, 191, 201, 210, 220, 229, 239, 248, 258, 267, 277, 286, 296, 305, 315, 324, 334, 343, 353, 362, 372, 381, 391, 400, 410, 419, 429, 438, 448, 457, 467, 476, 486, 495, 505, 514, 524, 533, 543, 552, 562, 571, 581, 590, 600, 609, 619, 628, 638, 647, 657, 666, 676, 685, 695, 704, 714, 723, 733, 742, 752, 761, 771, 780, 790, 799, 809, 818, 828, 837, 847, 856, 866, 875, 885, 894, 904, 913, 923, 932, 942, 951, 961, 970, 980, 989, 999, 1008, 1018, 1027, 1037, 1046, 1056, 1065, 1075, 1084, 1094, 1103, 1113, 1122, 1132, 1141, 1151, 1160, 1170, 1179, 1189, 1198, 1208, 1217, 1227, 1236, 1246, 1255, 1265, 1274, 1284, 1293, 1303, 1312, 1322, 1331, 1341, 1350, 1360, 1369, 1379, 1388, 1398, 1407, 1417, 1426, 1436, 1445, 1455]
        assert_array_almost_equal(e_obs, sw_dict["observations"][i][0])
        e_rt = [335212829.972929, 336205119.567585, 337015526.972999, 338007816.567604, 338818223.972898, 339810513.567513, 340620920.972938, 341613210.567583, 342423617.973008, 343415907.567603, 344226314.972907, 345218604.567522, 346029011.972946, 347021301.567592, 347831708.973006, 348823998.567601, 349634405.972915, 350626695.56753, 351437102.972945, 352429392.5676, 353239799.973015, 354232089.56761, 355042496.972924, 356034786.567539, 356845193.972953, 357837483.567609, 358647890.973023, 359640180.567618, 360450587.972932, 361442877.567548, 362253284.972962, 363245574.567607, 364055981.972992, 365048271.567516, 365858678.972941, 366850968.567556, 367661375.972971, 368653665.567576, 369464072.973, 370456362.567515, 371266769.972939, 372259059.567555, 373069466.972969, 374061756.567574, 374872163.972999, 375864453.567523, 376674860.972948, 377667150.567553, 378477557.972978, 379469847.567583, 380280254.973007, 381272544.567532, 382082951.972957, 383075241.567562, 383885648.972986, 384877938.567591, 385688345.973006, 386680635.567541, 387491042.972965, 388483332.56756, 389293739.972995, 390286029.56759, 391096436.973014, 392088726.567499, 392899133.972913, 393891423.567569, 394701830.972993, 395694120.567599, 396504527.973013, 397496817.567497, 398307224.972922, 399299514.567577, 400109921.973002, 401102211.567607, 401912618.973022, 402904908.567506, 403715315.972931, 404707605.567586, 405518012.973, 406510302.567606, 407320709.97303, 408312999.567515, 409123406.972939, 410115696.567585, 410926103.972999, 411918393.567604, 412728800.973039, 413721090.567523, 414531497.972948, 415523787.567593, 416334194.973008, 417326484.567603, 418136891.972917, 419129181.567532, 419939588.972946, 420931878.567602, 421742285.973016, 422734575.567611, 423544982.972925, 424537272.56754, 425347679.972955, 426339969.56761, 427150376.973025, 428142666.56762, 428953073.972934, 429945363.567549, 430755770.972963, 431748060.567609, 432558467.972993, 433550757.567618, 434361164.972942, 435353454.567558, 436163861.972972, 437156151.567577, 437966558.973002, 438958848.567516, 439769255.972941, 440761545.567556, 441571952.972971, 442564242.567576, 443374649.973, 444366939.567525, 445177346.972949, 446169636.567555, 446980043.972979, 447972333.567584, 448782740.972999, 449775030.567533, 450585437.972958, 451577727.567563, 452388134.972988, 453380424.567593, 454190831.973007, 455183121.567542, 455993528.972967, 456985818.567562, 457796225.972996, 458788515.567591, 459598922.973016, 460591212.5675, 461401619.972915, 462393909.56757, 463204316.972995, 464196606.5676, 465007013.973014, 465999303.567499, 466809710.972923, 467802000.567579, 468612407.973003, 469604697.567609, 470415104.973023, 471407394.567508, 472217801.972932, 473210091.567587]
        assert_array_almost_equal(e_rt, sw_dict["reach"]["time"][i][0])
        ixs = np.where(sos_data["node_reaches"] == 74269800011)
        e_nt = [335212829.000001, 336205120.0, 337015526.000001, 338007817.0, 338818223.0, 339810513.999999, 340620920.0, 341613210.999999, 342423616.999999, 343415907.999998, 344226313.999999, 345218604.999998, 346029010.999998, 347021301.999997, 347831707.999998, 348823998.999997, 349634404.999997, 350626695.999996, 351437101.999997, 352429392.999996, 353239798.999996, 354232089.999995, 355042495.999996, 356034787.000005, 356845192.999995, 357837484.000004, 358647889.999995, 359640181.000004, 360450587.000005, 361442878.000003, 362253284.000004, 363245575.000003, 364055981.000004, 365048272.000003, 365858678.000003, 366850969.000002, 367661375.000003, 368653666.000001, 369464072.000002, 370456363.000001, 371266769.000002, 372259060.000001, 373069466.000001, 374061757.0, 374872163.000001, 375864454.0, 376674860.0, 377667150.999999, 378477557.0, 379469847.999999, 380280253.999999, 381272544.999998, 382082950.999999, 383075241.999998, 383885647.999998, 384877938.999997, 385688344.999998, 386680635.999997, 387491041.999997, 388483332.999996, 389293738.999997, 390286029.999996, 391096435.999996, 392088726.999995, 392899132.999996, 393891424.000005, 394701829.999995, 395694121.000004, 396504527.000005, 397496818.000004, 398307224.000004, 399299515.000003, 400109921.000004, 401102212.000003, 401912618.000003, 402904909.000002, 403715315.000003, 404707606.000002, 405518012.000002, 406510303.000001, 407320709.000002, 408313000.000001, 409123406.000001, 410115697.0, 410926103.000001, 411918394.0, 412728800.0, 413721090.999999, 414531497.0, 415523787.999999, 416334193.999999, 417326484.999998, 418136890.999999, 419129181.999998, 419939587.999998, 420931878.999997, 421742284.999998, 422734575.999997, 423544981.999997, 424537272.999996, 425347678.999997, 426339969.999996, 427150375.999996, 428142666.999995, 428953072.999996, 429945364.000005, 430755769.999995, 431748061.000004, 432558466.999995, 433550758.000004, 434361164.000005, 435353455.000003, 436163861.000004, 437156152.000003, 437966558.000004, 438958849.000002, 439769255.000003, 440761546.000002, 441571952.000003, 442564243.000001, 443374649.000002, 444366940.000001, 445177346.000002, 446169637.0, 446980043.000001, 447972334.0, 448782740.000001, 449775031.0, 450585437.0, 451577727.999999, 452388134.0, 453380424.999999, 454190830.999999, 455183121.999998, 455993527.999999, 456985818.999997, 457796224.999998, 458788515.999997, 459598921.999998, 460591212.999997, 461401618.999997, 462393909.999996, 463204315.999997, 464196606.999996, 465007012.999996, 465999303.999995, 466809709.999996, 467802001.000005, 468612406.999995, 469604698.000004, 470415104.000005, 471407395.000004, 472217801.000004, 473210092.000003]
        assert_array_almost_equal(e_nt, sw_dict["node"]["time"][ixs][3])
        
        # Clean up
        self.SW_SOS.unlink()
        
    def test_append_module_data(self):
        """Tests append_module_data method."""
        
        # File operations to prepare for test
        copyfile(self.SOS_NEW, self.SW_SOS)
        sos_data = self.get_sos_data()
        
        # Create vlen types in SOS
        sos = Dataset(self.SW_SOS, 'a')
        vlen_f = sos.createVLType(np.float64, "vlen_float")
        vlen_i = sos.createVLType(np.int32, "vlen_int")
        vlen_s = sos.createVLType("S1", "vlen_str")
        sos.close()
        
        # Run method
        sw = Swot([7,8,9], self.SW_DIR, self.SW_SOS, vlen_f, vlen_i, vlen_s, \
            sos_data["reaches"], sos_data["node_reaches"], sos_data["nodes"])
        sw_dict = sw.get_module_data()
        sw.append_module_data(sw_dict)
        
        # Assert results
        sos = Dataset(self.SW_SOS, 'r')
        i = np.where(sos_data["reaches"] == 74269800011)
        e_obs = [1, 11, 20, 30, 39, 49, 58, 68, 77, 87, 96, 106, 115, 125, 134, 144, 153, 163, 172, 182, 191, 201, 210, 220, 229, 239, 248, 258, 267, 277, 286, 296, 305, 315, 324, 334, 343, 353, 362, 372, 381, 391, 400, 410, 419, 429, 438, 448, 457, 467, 476, 486, 495, 505, 514, 524, 533, 543, 552, 562, 571, 581, 590, 600, 609, 619, 628, 638, 647, 657, 666, 676, 685, 695, 704, 714, 723, 733, 742, 752, 761, 771, 780, 790, 799, 809, 818, 828, 837, 847, 856, 866, 875, 885, 894, 904, 913, 923, 932, 942, 951, 961, 970, 980, 989, 999, 1008, 1018, 1027, 1037, 1046, 1056, 1065, 1075, 1084, 1094, 1103, 1113, 1122, 1132, 1141, 1151, 1160, 1170, 1179, 1189, 1198, 1208, 1217, 1227, 1236, 1246, 1255, 1265, 1274, 1284, 1293, 1303, 1312, 1322, 1331, 1341, 1350, 1360, 1369, 1379, 1388, 1398, 1407, 1417, 1426, 1436, 1445, 1455]
        assert_array_almost_equal(e_obs, sos["observations"][i][0])
        e_rt = [335212829.972929, 336205119.567585, 337015526.972999, 338007816.567604, 338818223.972898, 339810513.567513, 340620920.972938, 341613210.567583, 342423617.973008, 343415907.567603, 344226314.972907, 345218604.567522, 346029011.972946, 347021301.567592, 347831708.973006, 348823998.567601, 349634405.972915, 350626695.56753, 351437102.972945, 352429392.5676, 353239799.973015, 354232089.56761, 355042496.972924, 356034786.567539, 356845193.972953, 357837483.567609, 358647890.973023, 359640180.567618, 360450587.972932, 361442877.567548, 362253284.972962, 363245574.567607, 364055981.972992, 365048271.567516, 365858678.972941, 366850968.567556, 367661375.972971, 368653665.567576, 369464072.973, 370456362.567515, 371266769.972939, 372259059.567555, 373069466.972969, 374061756.567574, 374872163.972999, 375864453.567523, 376674860.972948, 377667150.567553, 378477557.972978, 379469847.567583, 380280254.973007, 381272544.567532, 382082951.972957, 383075241.567562, 383885648.972986, 384877938.567591, 385688345.973006, 386680635.567541, 387491042.972965, 388483332.56756, 389293739.972995, 390286029.56759, 391096436.973014, 392088726.567499, 392899133.972913, 393891423.567569, 394701830.972993, 395694120.567599, 396504527.973013, 397496817.567497, 398307224.972922, 399299514.567577, 400109921.973002, 401102211.567607, 401912618.973022, 402904908.567506, 403715315.972931, 404707605.567586, 405518012.973, 406510302.567606, 407320709.97303, 408312999.567515, 409123406.972939, 410115696.567585, 410926103.972999, 411918393.567604, 412728800.973039, 413721090.567523, 414531497.972948, 415523787.567593, 416334194.973008, 417326484.567603, 418136891.972917, 419129181.567532, 419939588.972946, 420931878.567602, 421742285.973016, 422734575.567611, 423544982.972925, 424537272.56754, 425347679.972955, 426339969.56761, 427150376.973025, 428142666.56762, 428953073.972934, 429945363.567549, 430755770.972963, 431748060.567609, 432558467.972993, 433550757.567618, 434361164.972942, 435353454.567558, 436163861.972972, 437156151.567577, 437966558.973002, 438958848.567516, 439769255.972941, 440761545.567556, 441571952.972971, 442564242.567576, 443374649.973, 444366939.567525, 445177346.972949, 446169636.567555, 446980043.972979, 447972333.567584, 448782740.972999, 449775030.567533, 450585437.972958, 451577727.567563, 452388134.972988, 453380424.567593, 454190831.973007, 455183121.567542, 455993528.972967, 456985818.567562, 457796225.972996, 458788515.567591, 459598922.973016, 460591212.5675, 461401619.972915, 462393909.56757, 463204316.972995, 464196606.5676, 465007013.973014, 465999303.567499, 466809710.972923, 467802000.567579, 468612407.973003, 469604697.567609, 470415104.973023, 471407394.567508, 472217801.972932, 473210091.567587]
        assert_array_almost_equal(e_rt, sos["reaches"]["time"][i][0])
        ixs = np.where(sos_data["node_reaches"] == 74269800011)
        e_nt = [335212829.000001, 336205120.0, 337015526.000001, 338007817.0, 338818223.0, 339810513.999999, 340620920.0, 341613210.999999, 342423616.999999, 343415907.999998, 344226313.999999, 345218604.999998, 346029010.999998, 347021301.999997, 347831707.999998, 348823998.999997, 349634404.999997, 350626695.999996, 351437101.999997, 352429392.999996, 353239798.999996, 354232089.999995, 355042495.999996, 356034787.000005, 356845192.999995, 357837484.000004, 358647889.999995, 359640181.000004, 360450587.000005, 361442878.000003, 362253284.000004, 363245575.000003, 364055981.000004, 365048272.000003, 365858678.000003, 366850969.000002, 367661375.000003, 368653666.000001, 369464072.000002, 370456363.000001, 371266769.000002, 372259060.000001, 373069466.000001, 374061757.0, 374872163.000001, 375864454.0, 376674860.0, 377667150.999999, 378477557.0, 379469847.999999, 380280253.999999, 381272544.999998, 382082950.999999, 383075241.999998, 383885647.999998, 384877938.999997, 385688344.999998, 386680635.999997, 387491041.999997, 388483332.999996, 389293738.999997, 390286029.999996, 391096435.999996, 392088726.999995, 392899132.999996, 393891424.000005, 394701829.999995, 395694121.000004, 396504527.000005, 397496818.000004, 398307224.000004, 399299515.000003, 400109921.000004, 401102212.000003, 401912618.000003, 402904909.000002, 403715315.000003, 404707606.000002, 405518012.000002, 406510303.000001, 407320709.000002, 408313000.000001, 409123406.000001, 410115697.0, 410926103.000001, 411918394.0, 412728800.0, 413721090.999999, 414531497.0, 415523787.999999, 416334193.999999, 417326484.999998, 418136890.999999, 419129181.999998, 419939587.999998, 420931878.999997, 421742284.999998, 422734575.999997, 423544981.999997, 424537272.999996, 425347678.999997, 426339969.999996, 427150375.999996, 428142666.999995, 428953072.999996, 429945364.000005, 430755769.999995, 431748061.000004, 432558466.999995, 433550758.000004, 434361164.000005, 435353455.000003, 436163861.000004, 437156152.000003, 437966558.000004, 438958849.000002, 439769255.000003, 440761546.000002, 441571952.000003, 442564243.000001, 443374649.000002, 444366940.000001, 445177346.000002, 446169637.0, 446980043.000001, 447972334.0, 448782740.000001, 449775031.0, 450585437.0, 451577727.999999, 452388134.0, 453380424.999999, 454190830.999999, 455183121.999998, 455993527.999999, 456985818.999997, 457796224.999998, 458788515.999997, 459598921.999998, 460591212.999997, 461401618.999997, 462393909.999996, 463204315.999997, 464196606.999996, 465007012.999996, 465999303.999995, 466809709.999996, 467802001.000005, 468612406.999995, 469604698.000004, 470415104.000005, 471407395.000004, 472217801.000004, 473210092.000003]
        assert_array_almost_equal(e_nt, sos["nodes"]["time"][ixs][3])
        
        # Clean up
        sos.close()
        self.SW_SOS.unlink()